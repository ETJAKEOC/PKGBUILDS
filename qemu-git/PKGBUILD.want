# Maintainer: ETJAKEOC <ETJAKEOC@gmail.com>
pkgname=qemu-full-git
pkgver=10.1.0.r252.g91589bcd9f
pkgrel=1
epoch=25
arch=(x86_64)
pkgdesc="All-in-one QEMU: every architecture, system emulator, UI, audio backend, guest-agent, and firmware. Git version."
license=(GPL-2.0-or-later LGPL-2.1-or-later)
url="https://wiki.qemu.org/"
depends=(
alsa-lib brltty bzip2 cairo capstone curl cdrtools dtc fuse3 gcc-libs gdk-pixbuf2
glib2 glusterfs gnutls gtk3 jack libaio libbpf libcacard libcap-ng libepoxy
libiscsi libnfs libpng libpulse libsasl libseccomp libslirp libssh libusb
libx11 libxkbcommon lzo mesa meson ncurses ndctl numactl pam pixman python
python-sphinx python-sphinx_rtd_theme rdma-core sdl2 sdl2_image seabios
snappy spice-protocol spice systemd usbredir vde2 virglrenderer vte3 xfsprogs zlib zstd
)
optdepends=(
'samba: SMB/CIFS server support'
'binfmt-support: run foreign binaries transparently'
)
provides=(
qemu qemu-git qemu-full-git
qemu-arch-extra-git
qemu-audio-alsa qemu-audio-dbus qemu-audio-pa qemu-audio-sdl qemu-audio-spice
qemu-block-iscsi-git qemu-block-gluster-git
qemu-guest-agent-git
qemu-hw-display-qxl qemu-hw-display-virtio-gpu-pci-gl qemu-hw-uefi-vars
qemu-system-arm qemu-system-arm-firmware
qemu-system-armv7 qemu-system-x86 qemu-system-x86-firmware
qemu-ui-dbus qemu-ui-gtk qemu-ui-opengl qemu-ui-sdl qemu-ui-spice-app qemu-ui-spice-core
qemu-user qemu-vhost-user-gpu
edk2-ovmf edk2-armvirt edk2-platforms
ovmf opensbi qboot u-boot vbootrom seabios qemumacdrivers slof openbios skiboot
)
conflicts=("${provides[@]}")

options=(!debug)

source=(
git+https://gitlab.com/qemu-project/qemu.git
edk2::git+https://github.com/tianocore/edk2.git
edk2-platforms::git+https://github.com/tianocore/edk2-platforms.git
qemu-guest-agent.service
65-kvm.rules
)
sha256sums=('SKIP' 'SKIP' 'SKIP'
'c39bcde4a09165e64419fd2033b3532378bba84d509d39e2d51694d44c1f8d88'
'a66f0e791b16b03b91049aac61a25950d93e962e1b2ba64a38c6ad7f609b532c')

_gitname=qemu
_corearch=x86_64

pkgver() {
    cd "${srcdir}/${_gitname}"
    git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | cut -c2-
}

prepare() {
    # Prepare qemu and all submodules
    cd "$srcdir/${_gitname}"
    git submodule update --init --recursive
    mkdir -p "$srcdir/${_gitname}/build"

    # Prepare edk2 and all submodules
    cd "$srcdir/edk2"
    git submodule update --init --recursive

    # Prepare edk2-platforms and all submodules
    cd "$srcdir/edk2-platforms"
    git submodule update --init --recursive
}

# Centralized environment setup
_setup_env() {
    export CC=clang
    export CXX=clang++
    export LD=lld
    export AR=llvm-ar
    export NM=llvm-nm
    export STRIP=llvm-strip
    export OBJCOPY=llvm-objcopy
    export OBJDUMP=llvm-objdump
    export RANLIB=llvm-ranlib
    export HOSTCC=clang
    export HOSTCXX=clang++

    export CPPFLAGS="-march=znver2 -mtune=znver2 -pipe"
    export CFLAGS="-march=znver2 -mtune=znver2 -pipe -O3 -ffunction-sections -fdata-sections -flto=full -g0"
    export CXXFLAGS="-march=znver2 -mtune=znver2 -pipe -O3 -flto=full -ffunction-sections -fdata-sections -g0"
    export LDFLAGS="-fuse-ld=lld -flto=full -O3 -Wl,--gc-sections -pthread"
    export RUSTFLAGS="-C opt-level=3 -C target-cpu=znver2 -C codegen-units=1 -C linker-plugin-lto -C panic=abort -C debuginfo=0 -C strip=debuginfo"
}

_build_qemu() {
    _setup_env
    cd "$srcdir/${_gitname}/build"
    ../configure \
        --prefix=/usr \
        --sysconfdir=/etc \
        --localstatedir=/var \
        --libexecdir=/usr/lib/qemu \
        --smbd=/usr/bin/smbd \
        --audio-drv-list=alsa,pipewire,pa,jack,sdl \
        --cpu=znver2 \
        --disable-werror \
        --enable-attr \
        --disable-bochs \
        --enable-bpf \
        --enable-bzip2 \
        --enable-cap-ng \
        --enable-curses \
        --enable-download \
        --enable-fdt \
        --enable-fuse \
        --enable-guest-agent \
        --enable-gtk \
        --enable-kvm \
        --enable-libiscsi \
        --enable-libssh \
        --enable-libusb \
        --enable-linux-aio \
        --enable-lto \
        --enable-lzo \
        --enable-modules \
        --enable-numa \
        --enable-opengl \
        --enable-pie \
        --enable-sdl \
        --enable-slirp \
        --enable-snappy \
        --enable-strip \
        --disable-tcg-interpreter \
        --enable-tools \
        --enable-vde \
        --enable-vhost-net \
        --enable-vhost-user \
        --enable-virglrenderer \
        --enable-virtfs \
        --enable-zstd \
        --disable-cloop \
        --enable-dmg \
        --enable-parallels \
        --enable-qcow1 \
        --disable-qed \
        --enable-vdi \
        --enable-vvfat \
        --cc=clang --cxx=clang++ --extra-cflags="${CFLAGS}" --extra-ldflags="${LDFLAGS}"

    make LLVM=1 LLVM_IAS=1 -j$(nproc)
}

_build_edk2() {
    cd "$srcdir/edk2"
    . edksetup.sh
    make -C BaseTools LLVM=1 LLVM_IAS=1 -j$(nproc)

    local dir="$1"
    local arch="$2"
    local dsc="$3"

    echo "Building EDK2 in $dir for $arch..."
    export WORKSPACE="$dir"
    export GCC5_AARCH64_PREFIX=aarch64-linux-gnu-
    export GCC5_ARM_PREFIX=arm-linux-gnueabihf-

    bash -c "
        cd '$dir' || exit
        . edksetup.sh
        build -a '$arch' -t GCC5 -p '$dsc' -b RELEASE
    "
}

_build_rom() {
    local rom="$1"
    _setup_env
    cd "$srcdir/${_gitname}/roms/$rom" || return
    make LLVM=1 LLVM_IAS=1 -j$(nproc) || true
}

build() {
    _build_qemu

    # EDK2 firmware
    _build_edk2 "$srcdir/edk2" "X64" "OvmfPkg/OvmfPkgX64.dsc"
    _build_edk2 "$srcdir/edk2" "AARCH64" "ArmVirtPkg/ArmVirtQemu.dsc"
    _build_edk2 "$srcdir/edk2" "ARM" "ArmVirtPkg/ArmVirtQemu.dsc"

    # EDK2-platforms firmware
    _build_edk2 "$srcdir/edk2-platforms" "X64" "OvmfPkg/OvmfPkgX64.dsc"
    _build_edk2 "$srcdir/edk2-platforms" "AARCH64" "ArmVirtPkg/ArmVirtQemu.dsc"
    _build_edk2 "$srcdir/edk2-platforms" "ARM" "ArmVirtPkg/ArmVirtQemu.dsc"

    # ROM builds
    for rom in QemuMacDrivers SLOF edk2 ipxe openbios opensbi qboot qemu-palcode \
               seabios seabios-hppa skiboot u-boot u-boot-sam460ex vbootrom; do
        _build_rom "$rom"
    done
}

_package_full() {
    cp -a "$srcdir/$_gitname/build/"* "$pkgdir/usr/"
    mkdir -p "$pkgdir/usr/share/qemu/extra-arch"
    cp -a "$srcdir/$_gitname/extra-arch/"* "$pkgdir/usr/share/qemu/extra-arch/"
    install -Dm755 "$srcdir/$_gitname/build/qga/qemu-ga" -t "$pkgdir/usr/bin/"
    install -Dm644 "$srcdir/qemu-guest-agent.service" -t "$pkgdir/usr/lib/systemd/system/"
    install -Dm755 "$srcdir/$_gitname/scripts/qemu-guest-agent/fsfreeze-hook" -t "$pkgdir/etc/qemu/"
    cp -a "$srcdir/$_gitname/build/audio" "$pkgdir/usr/lib/qemu/"
    cp -a "$srcdir/$_gitname/build/spice" "$pkgdir/usr/lib/qemu/"
    cp -a "$srcdir/$_gitname/build/vhost" "$pkgdir/usr/lib/qemu/"
    cp -a "$srcdir/$_gitname/build/hw" "$pkgdir/usr/lib/qemu/"
    cp -a "$srcdir/$_gitname/share/qemu" "$pkgdir/usr/share/qemu/"
    chmod u+s "$pkgdir/usr/lib/qemu/qemu-bridge-helper"
    install -Dm644 "$srcdir/65-kvm.rules" "$pkgdir/usr/lib/udev/rules.d/65-kvm.rules"
    rm -r "$pkgdir/var"

    # EDK2 firmware
    install -Dm644 "$srcdir/edk2/Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd" "$pkgdir/usr/share/edk2/ovmf/OVMF_CODE.fd"
    install -Dm644 "$srcdir/edk2/Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd" "$pkgdir/usr/share/edk2/ovmf/OVMF_VARS.fd"

    mkdir -p "$pkgdir/usr/share/edk2/armvirt"
    install -Dm644 "$srcdir/edk2-platforms/Build/ArmVirtQemu/DEBUG_GCC5/FV/ArmVirtFd.fd" "$pkgdir/usr/share/edk2/armvirt/ArmVirtFd.fd"

    mkdir -p "$pkgdir/usr/share/edk2/platforms"
    install -Dm644 "$srcdir/edk2-platforms/Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd" "$pkgdir/usr/share/edk2/platforms/OVMF_CODE.fd"
    install -Dm644 "$srcdir/edk2-platforms/Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd" "$pkgdir/usr/share/edk2/platforms/OVMF_VARS.fd"

    # ROMs
    mkdir -p "$pkgdir/usr/share/qemu/roms"
    for rom in QemuMacDrivers SLOF edk2 ipxe openbios opensbi qboot qemu-palcode \
               seabios seabios-hppa skiboot u-boot u-boot-sam460ex vbootrom; do
        cp -a "$srcdir/$_gitname/roms/$rom" "$pkgdir/usr/share/qemu/roms/$rom"
    done

    rm -rf "$pkgdir/usr/share/doc/qemu"
    find "$pkgdir/usr/lib/python*/site-packages" -name '*.py[co]' -delete

    strip --strip-unneeded "$pkgdir/usr/bin/"*
    strip --strip-unneeded "$pkgdir/usr/lib/qemu/"*.so
}

package_qemu-full-git() {
    pkgdesc="All-in-one QEMU with every architecture, system emulator, UI, audio backend, guest-agent, and firmware. Git version."
    _package_full
}
