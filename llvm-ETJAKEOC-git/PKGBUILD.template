pkgbase=llvm-ETJAKEOC-git
pkgname=('llvm-git')
provides=('llvm' 'llvm-git' 'llvm-libs-git' 'compiler-rt' 'clang' 'clang-analyzer'
 'clang-tools-extra' 'clang-libs' 'clang-opencl-headers')
conflicts=('llvm' 'llvm-git' 'llvm-libs-git' 'compiler-rt' 'clang' 'clang-analyzer'
 'clang-tools-extra' 'clang-libs' 'clang-opencl-headers')
pkgver=22.0.0_r548036.76d2f0fe471d
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('Apache-2.0 WITH LLVM-exception')
depends=('zstd' 'zlib' 'glibc' 'gcc-libs' 'libffi' 'libedit' 'ncurses' 'libxml2')
makedepends=('git' 'cmake' 'ninja' 'libffi' 'libedit' 'ncurses' 'libxml2' 'python-setuptools'
 'opencl-headers' 'z3' 'jsoncpp' 'ocaml-stdlib-shims' 'zstd' 'libxcrypt' 'python')
optdepends=('python: for using lit (LLVM Integrated Tester)'
	    'python-setuptools: for using lit'
	    'openmp: OpenMP support in clang with -fopenmp'
	    'python: for scan-view, scan-build, git-clang-format, clang-rename and python bindings'
	    'llvm-git: referenced by some clang headers')
source=("git+https://github.com/llvm/llvm-project.git")
sha512sums=('SKIP')
options=('!strip')
_cores="$(nproc)"
export NINJAFLAGS="-j ${_cores} -l ${_cores}"
export LITFLAGS="-j ${_cores}"

pkgver() {
    cd llvm-project/cmake/Modules
    local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
            'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
             LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
    echo "${_pkgver}"
}

build() {
  local cmake_args=(
        # Build system / Generator
        -Wno-dev
        -G Ninja
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX=/usr
        -DCMAKE_INSTALL_LIBDIR=lib
        -DCMAKE_STRIP=strip

        # Compiler & Toolchain
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_CXX_COMPILER=clang++
        -DLLVM_USE_LINKER=lld
        -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld -flto -O3 -pthread"
        -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld -flto -O3 -pthread"
        -DCMAKE_C_FLAGS="-march=znver2 -mtune=znver2 -O3 -flto -pipe -fexceptions"
        -DCMAKE_CXX_FLAGS="-march=znver2 -mtune=znver2 -O3 -flto -pipe -fexceptions"

        # Target & Triplet
        -DLLVM_HOST_TRIPLE="x86_64-pc-linux-gnu"
        -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-pc-linux-gnu"
        -DCMAKE_C_COMPILER_TARGET="x86_64-pc-linux-gnu"
        -DCMAKE_CXX_COMPILER_TARGET="x86_64-pc-linux-gnu"
        -DCMAKE_SYSTEM_PROCESSOR="x86_64"

        # Standards
        -DCMAKE_CXX_STANDARD=21

        # Toolchain & Build Optimizations
        -DLLVM_USE_RELATIVE_PATHS_IN_FILES=ON
        -DLLVM_USE_SPLIT_DWARF=ON
        -DLLVM_CCACHE_BUILD=ON
        -DLLVM_PARALLEL_LINK_JOBS=${_cores}
        -DLLVM_PARALLEL_COMPILE_JOBS=${_cores}

        # Features
        -DLLVM_BUILD_LLVM_DYLIB=ON
        -DLLVM_LINK_LLVM_DYLIB=ON
        -DCLANG_LINK_CLANG_DYLIB=ON
        -DLLVM_ENABLE_LTO=Full
        -DLLVM_ENABLE_EH=ON
        -DLLVM_ENABLE_RTTI=ON
        -DLLVM_ENABLE_FFI=ON
        -DLLVM_ENABLE_PIC=ON
        -DLLVM_OPTIMIZED_TABLEGEN=ON
        -DLLVM_ENABLE_LIBXML2=ON
        -DLLVM_ENABLE_THREADS=ON
        -DLLVM_ENABLE_UNWIND_TABLES=ON
        -DLLVM_ENABLE_ZLIB=ON
        -DLLVM_ENABLE_ZSTD=ON
        -DLLVM_USE_OPROFILE=OFF
        -DLIBCXX_ENABLE_EXCEPTIONS=ON
        -DLIBCXX_ENABLE_RTTI=ON
        -DLIBUNWIND_ENABLE_EXCEPTIONS=ON
        -DLIBUNWIND_ENABLE_SHARED=ON
        -DLIBUNWIND_ENABLE_STATIC=ON
        -DLIBUNWIND_USE_COMPILER_RT=ON
        -DLIBUNWIND_ENABLE_CROSS_UNWINDING=ON
        -DLIBUNWIND_ENABLE_THREADS=ON
        -DLIBCXXABI_USE_LLVM_UNWINDER=ON
        -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON
        -DLLVM_BUILD_32_BITS=OFF

        # Debug & Dev
        -DLLVM_ENABLE_ASSERTIONS=OFF
        -DLLVM_ENABLE_DUMP=ON
        -DLLVM_USE_PERF=OFF

        # Install / Symlinks
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF
        -DLLVM_INSTALL_UTILS=ON
        -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON
        -DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON

        # Targets & Architectures
        -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86;ARM;AArch64;BPF;WebAssembly"
        -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="DirectX;SPIRV"
        -DLIBCLC_TARGETS_TO_BUILD="amdgcn--amdhsa;amdgcn--;amdgcn-mesa-mesa3d"
        -DLIBCLC_AMDGPU_TARGETS_TO_BUILD="gfx803"
        -DLIBOMPTARGET_ENABLE_AMDGPU=ON
        -DLIBOMPTARGET_AMDGPU_ARCH="gfx803"
        -DLIBOMPTARGET_AMDGPU_TARGETS="gfx803"

        # Components & Projects
        -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;llvm;polly;mlir"
        -DLLVM_ENABLE_RUNTIMES="libclc;libunwind;compiler-rt;openmp;offload"
        -DLLVM_DISTRIBUTION_COMPONENTS="clang;lld;libclc;llvm-ar;llvm-nm;llvm-readobj;llvm-objdump"

        # Unneeded Bits Disabled
        -DLLVM_INCLUDE_BENCHMARKS=OFF
        -DLLVM_INCLUDE_EXAMPLES=OFF
        -DLLVM_INCLUDE_TESTS=OFF
        -DLLVM_INCLUDE_DOCS=OFF
        -DLLVM_ENABLE_OCAMLDOC=OFF
        -DLLVM_ENABLE_SPHINX=OFF
        -DLLVM_ENABLE_DOXYGEN=OFF
        -DLLVM_ENABLE_BINDINGS=OFF

        # Misc
        -DFFI_INCLUDE_DIR:PATH=/usr/include
  )
  unset LIBRARY_PATH
  unset LD_LIBRARY_PATH
  cmake -B _build -S "$srcdir/llvm-project/llvm" "${cmake_args[@]}"
  ninja $NINJAFLAGS -C _build
}

package_llvm-git() {
  DESTDIR="$pkgdir" ninja $NINJAFLAGS -C _build install
  find "$pkgdir/usr/lib" -type f \( -name '*.so' -o -name '*.so.*' \) -delete
  find "$pkgdir/usr/lib" -type f -name '*.a' -delete  # static libs belong in llvm-libs too
  rm -rf "$pkgdir/usr/lib/clang"
  find "$pkgdir/usr/lib" -type f -name 'libclang*.so*' -delete
}

package_llvm-libs-git() {
  DESTDIR="$pkgdir" ninja $NINJAFLAGS -C _build install
  rm -rf "$pkgdir/usr/bin"
  rm -rf "$pkgdir/usr/include/clang/tools"
  if [ ! -d "$pkgdir/usr/lib/clang" ]; then
    mkdir -p "$pkgdir/usr/lib"
    cp -r "$srcdir/llvm-project/llvm/lib/clang" "$pkgdir/usr/lib/"
  fi
}

package_clang-tools-extra-git() {
  DESTDIR="$pkgdir" ninja $NINJAFLAGS -C _build install
  rm -f "$pkgdir/usr/bin/clang" "$pkgdir/usr/bin/clang++"
  rm -rf "$pkgdir/usr/include/clang/tools/extra" # optional cleanup
}
